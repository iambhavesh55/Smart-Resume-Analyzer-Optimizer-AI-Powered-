import { jsPDF } from 'jspdf';

export class ReportGenerator {
    constructor() {
        this.colors = {
            primary: [102, 126, 234],
            secondary: [118, 75, 162],
            success: [40, 167, 69],
            warning: [255, 193, 7],
            danger: [220, 53, 69],
            text: [45, 55, 72],
            lightGray: [247, 250, 252]
        };
    }

    generateTextReport(analysis, resumeText) {
        const timestamp = new Date().toLocaleString();
        
        let report = `SMART RESUME ANALYSIS REPORT
Generated on: ${timestamp}

OVERALL SCORES:
- Overall Score: ${analysis.overallScore}/100
- Skill Match: ${analysis.skillMatchPercentage.toFixed(1)}%
- Readability: ${analysis.readabilityScore.toFixed(1)}
- Keywords Found: ${analysis.matchedKeywords.length}

MATCHED SKILLS (${analysis.matchedSkills.length}):
${analysis.matchedSkills.length > 0 ? analysis.matchedSkills.join(', ') : 'None identified'}

MISSING SKILLS (${analysis.missingSkills.length}):
${analysis.missingSkills.length > 0 ? analysis.missingSkills.join(', ') : 'None identified'}

MATCHED KEYWORDS:
${analysis.matchedKeywords.length > 0 ? analysis.matchedKeywords.join(', ') : 'None identified'}

MISSING KEYWORDS:
${analysis.missingKeywords.length > 0 ? analysis.missingKeywords.join(', ') : 'None identified'}

SECTION ANALYSIS:
- Summary/Objective: ${analysis.hasSummary ? 'Present' : 'Missing'} (${analysis.summaryQuality || 'N/A'})
- Work Experience: ${analysis.hasExperience ? 'Present' : 'Missing'} (${analysis.experienceQuality || 'N/A'})
- Education: ${analysis.hasEducation ? 'Present' : 'Missing'} (${analysis.educationQuality || 'N/A'})
- Skills: ${analysis.hasSkills ? 'Present' : 'Missing'} (${analysis.skillsQuality || 'N/A'})
- Projects: ${analysis.hasProjects ? 'Present' : 'Missing'} (${analysis.projectsQuality || 'N/A'})

KEY RECOMMENDATIONS:
`;

        // Add top suggestions from each category
        if (analysis.suggestions) {
            Object.entries(analysis.suggestions).forEach(([category, items]) => {
                if (items.length > 0) {
                    report += `\n${category.replace(/([A-Z])/g, ' $1').toUpperCase()}:\n`;
                    items.slice(0, 3).forEach(item => {
                        report += `- ${item}\n`;
                    });
                }
            });
        }

        report += `\nREPORT SUMMARY:
This analysis provides insights into how well your resume aligns with your target job role. 
Focus on the high-priority recommendations to improve your chances of getting interviews.

Generated by Smart Resume Analyzer - AI-Powered Resume Analysis Tool`;

        return report;
    }

    async generatePdfReport(analysis, resumeText) {
        const doc = new jsPDF();
        const pageWidth = doc.internal.pageSize.getWidth();
        const pageHeight = doc.internal.pageSize.getHeight();
        let yPosition = 20;

        // Helper function to add text with word wrapping
        const addWrappedText = (text, x, y, maxWidth, fontSize = 10) => {
            doc.setFontSize(fontSize);
            const lines = doc.splitTextToSize(text, maxWidth);
            doc.text(lines, x, y);
            return y + (lines.length * fontSize * 0.4);
        };

        // Header
        doc.setFillColor(...this.colors.primary);
        doc.rect(0, 0, pageWidth, 40, 'F');
        
        doc.setTextColor(255, 255, 255);
        doc.setFontSize(24);
        doc.setFont(undefined, 'bold');
        doc.text('Smart Resume Analysis Report', pageWidth / 2, 25, { align: 'center' });

        doc.setFontSize(12);
        doc.setFont(undefined, 'normal');
        doc.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth / 2, 35, { align: 'center' });

        yPosition = 50;

        // Overall Scores Section
        doc.setTextColor(...this.colors.text);
        doc.setFontSize(16);
        doc.setFont(undefined, 'bold');
        doc.text('Overall Scores', 20, yPosition);
        yPosition += 10;

        // Score boxes
        const scoreBoxWidth = 40;
        const scoreBoxHeight = 25;
        const scores = [
            { label: 'Overall', value: `${analysis.overallScore}/100`, x: 20 },
            { label: 'Skills', value: `${analysis.skillMatchPercentage.toFixed(1)}%`, x: 70 },
            { label: 'Keywords', value: analysis.matchedKeywords.length, x: 120 },
            { label: 'Readability', value: analysis.readabilityScore.toFixed(1), x: 170 }
        ];

        scores.forEach(score => {
            // Box background
            doc.setFillColor(...this.colors.lightGray);
            doc.rect(score.x, yPosition, scoreBoxWidth, scoreBoxHeight, 'F');
            
            // Box border
            doc.setDrawColor(...this.colors.primary);
            doc.rect(score.x, yPosition, scoreBoxWidth, scoreBoxHeight);
            
            // Score value
            doc.setTextColor(...this.colors.primary);
            doc.setFontSize(14);
            doc.setFont(undefined, 'bold');
            doc.text(score.value.toString(), score.x + scoreBoxWidth/2, yPosition + 12, { align: 'center' });
            
            // Score label
            doc.setTextColor(...this.colors.text);
            doc.setFontSize(10);
            doc.setFont(undefined, 'normal');
            doc.text(score.label, score.x + scoreBoxWidth/2, yPosition + 20, { align: 'center' });
        });

        yPosition += 35;

        // Skills Analysis Section
        doc.setTextColor(...this.colors.text);
        doc.setFontSize(16);
        doc.setFont(undefined, 'bold');
        doc.text('Skills Analysis', 20, yPosition);
        yPosition += 10;

        // Matched Skills
        doc.setTextColor(...this.colors.success);
        doc.setFontSize(12);
        doc.setFont(undefined, 'bold');
        doc.text(`✓ Matched Skills (${analysis.matchedSkills.length})`, 20, yPosition);
        yPosition += 8;

        if (analysis.matchedSkills.length > 0) {
            doc.setTextColor(...this.colors.text);
            doc.setFontSize(10);
            doc.setFont(undefined, 'normal');
            const matchedSkillsText = analysis.matchedSkills.join(', ');
            yPosition = addWrappedText(matchedSkillsText, 20, yPosition, pageWidth - 40);
        } else {
            doc.setTextColor(...this.colors.text);
            doc.setFontSize(10);
            doc.text('No specific skills matched', 20, yPosition);
            yPosition += 6;
        }

        yPosition += 5;

        // Missing Skills
        doc.setTextColor(...this.colors.danger);
        doc.setFontSize(12);
        doc.setFont(undefined, 'bold');
        doc.text(`✗ Missing Skills (${analysis.missingSkills.length})`, 20, yPosition);
        yPosition += 8;

        if (analysis.missingSkills.length > 0) {
            doc.setTextColor(...this.colors.text);
            doc.setFontSize(10);
            doc.setFont(undefined, 'normal');
            const missingSkillsText = analysis.missingSkills.slice(0, 15).join(', ');
            yPosition = addWrappedText(missingSkillsText, 20, yPosition, pageWidth - 40);
        } else {
            doc.setTextColor(...this.colors.text);
            doc.setFontSize(10);
            doc.text('Great! You have most required skills', 20, yPosition);
            yPosition += 6;
        }

        yPosition += 10;

        // Check if we need a new page
        if (yPosition > pageHeight - 60) {
            doc.addPage();
            yPosition = 20;
        }

        // Recommendations Section
        doc.setTextColor(...this.colors.text);
        doc.setFontSize(16);
        doc.setFont(undefined, 'bold');
        doc.text('Key Recommendations', 20, yPosition);
        yPosition += 10;

        if (analysis.suggestions) {
            const priorityCategories = ['skillsImprovement', 'contentEnhancement', 'keywordOptimization'];
            
            priorityCategories.forEach(category => {
                if (analysis.suggestions[category] && analysis.suggestions[category].length > 0) {
                    const categoryTitle = category.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
                    
                    doc.setTextColor(...this.colors.primary);
                    doc.setFontSize(12);
                    doc.setFont(undefined, 'bold');
                    doc.text(categoryTitle, 20, yPosition);
                    yPosition += 8;

                    doc.setTextColor(...this.colors.text);
                    doc.setFontSize(10);
                    doc.setFont(undefined, 'normal');

                    analysis.suggestions[category].slice(0, 3).forEach(suggestion => {
                        yPosition = addWrappedText(`• ${suggestion}`, 25, yPosition, pageWidth - 50);
                        yPosition += 2;
                    });

                    yPosition += 5;

                    // Check if we need a new page
                    if (yPosition > pageHeight - 40) {
                        doc.addPage();
                        yPosition = 20;
                    }
                }
            });
        }

        // Footer
        const footerY = pageHeight - 20;
        doc.setTextColor(...this.colors.text);
        doc.setFontSize(8);
        doc.setFont(undefined, 'normal');
        doc.text('Generated by Smart Resume Analyzer - AI-Powered Resume Analysis Tool', pageWidth / 2, footerY, { align: 'center' });

        return doc.output('blob');
    }

    generateSummaryStats(analysis) {
        return {
            totalScore: analysis.overallScore,
            skillsMatched: analysis.matchedSkills.length,
            skillsMissing: analysis.missingSkills.length,
            keywordsFound: analysis.matchedKeywords.length,
            keywordsMissing: analysis.missingKeywords.length,
            readabilityScore: analysis.readabilityScore,
            sectionsPresent: [
                analysis.hasSummary,
                analysis.hasExperience,
                analysis.hasEducation,
                analysis.hasSkills,
                analysis.hasProjects
            ].filter(Boolean).length,
            totalSections: 5
        };
    }

    generateImprovementPlan(analysis) {
        const plan = {
            immediate: [],
            shortTerm: [],
            longTerm: []
        };

        // Immediate actions (can be done today)
        if (!analysis.hasSummary) {
            plan.immediate.push('Add a professional summary section');
        }
        if (!analysis.hasSkills) {
            plan.immediate.push('Create a dedicated skills section');
        }
        if (analysis.missingKeywords.length > 5) {
            plan.immediate.push('Incorporate more relevant keywords from job descriptions');
        }

        // Short-term actions (1-2 weeks)
        if (analysis.missingSkills.length > 0) {
            plan.shortTerm.push(`Learn or highlight experience in: ${analysis.missingSkills.slice(0, 3).join(', ')}`);
        }
        if (analysis.experienceQuality === 'needs-improvement') {
            plan.shortTerm.push('Rewrite experience descriptions with quantifiable achievements');
        }
        if (!analysis.hasProjects) {
            plan.shortTerm.push('Add a projects section showcasing relevant work');
        }

        // Long-term actions (1+ months)
        if (analysis.skillMatchPercentage < 50) {
            plan.longTerm.push('Develop missing technical skills through courses or certifications');
        }
        if (analysis.overallScore < 70) {
            plan.longTerm.push('Consider professional resume review or career coaching');
        }

        return plan;
    }
}